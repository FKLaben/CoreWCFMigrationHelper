//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CoreWCFService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/CoreWCFService")]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool BoolValueField;
        
        private string StringValueField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue
        {
            get
            {
                return this.BoolValueField;
            }
            set
            {
                this.BoolValueField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue
        {
            get
            {
                return this.StringValueField;
            }
            set
            {
                this.StringValueField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IService")]
public interface IService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetData", ReplyAction="http://tempuri.org/IService/GetDataResponse")]
    string GetData(int value);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetData", ReplyAction="http://tempuri.org/IService/GetDataResponse")]
    System.Threading.Tasks.Task<string> GetDataAsync(int value);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService/GetDataUsingDataContractResponse")]
    CoreWCFService.CompositeType GetDataUsingDataContract(CoreWCFService.CompositeType composite);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService/GetDataUsingDataContractResponse")]
    System.Threading.Tasks.Task<CoreWCFService.CompositeType> GetDataUsingDataContractAsync(CoreWCFService.CompositeType composite);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IServiceChannel : IService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class ServiceClient : System.ServiceModel.ClientBase<IService>, IService
{
    // Step 1: ConfigureEndpoint
    static void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials)
    {
        System.ServiceModel.EndpointAddress endpointAddress = ServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IService);
        serviceEndpoint.Address = endpointAddress;
    }

    // Step 2: Configure ctor
    public ServiceClient()
        : base(ServiceClient.GetDefaultBinding(), ServiceClient.GetDefaultEndpointAddress())
    {
        this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IService.ToString();
        ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }
    
    public ServiceClient(EndpointConfiguration endpointConfigurationName)
        : base(ServiceClient.GetBindingForEndPoint(endpointConfigurationName), ServiceClient.GetEndpointAddress(endpointConfigurationName))
    {
        this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IService.ToString();
        ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }
    
    public ServiceClient(EndpointConfiguration endpointConfigurationName, string remoteAddress) : 
            base(ServiceClient.GetBindingForEndPoint(endpointConfigurationName), new System.ServiceModel.EndpointAddress(remoteAddress))
    {
        this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IService.ToString();
        ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }
    
    public ServiceClient(EndpointConfiguration endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(ServiceClient.GetBindingForEndPoint(endpointConfigurationName), remoteAddress)
    {
        this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IService.ToString();
        ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }
    
    public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public string GetData(int value)
    {
        return base.Channel.GetData(value);
    }
    
    public System.Threading.Tasks.Task<string> GetDataAsync(int value)
    {
        return base.Channel.GetDataAsync(value);
    }
    
    public CoreWCFService.CompositeType GetDataUsingDataContract(CoreWCFService.CompositeType composite)
    {
        return base.Channel.GetDataUsingDataContract(composite);
    }
    
    public System.Threading.Tasks.Task<CoreWCFService.CompositeType> GetDataUsingDataContractAsync(CoreWCFService.CompositeType composite)
    {
        return base.Channel.GetDataUsingDataContractAsync(composite);
    }

    // Step 4: Implements below:
    public static System.ServiceModel.Channels.Binding GetBindingForEndPoint(EndpointConfiguration endpointConfiguration)
    {
        if (endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService)
        {
            System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
            result.MaxBufferSize = int.MaxValue;
            result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
            result.MaxReceivedMessageSize = int.MaxValue;
            result.AllowCookies = true;
            result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
            return result;
        }

        throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
    }

    private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
    {
        if (endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService)
        {
            return new System.ServiceModel.EndpointAddress("https://localhost:7212/Service.svc");
        }

        throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
    }

    private static System.ServiceModel.Channels.Binding GetDefaultBinding()
    {
        return ServiceClient.GetBindingForEndPoint(EndpointConfiguration.BasicHttpBinding_IService);
    }

    private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
    {
        return ServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IService);
    }

    public enum EndpointConfiguration
    {
        BasicHttpBinding_IService
    }
}
